#
# Makefile fragment for JOS kernel.
# This is NOT a complete makefile;
# you must run GNU make in the top-level directory
# where the GNUmakefile is located.
#

OBJDIRS += kern

KERN_LDFLAGS := $(LDFLAGS) -T kern/kernel.ld -nostdlib

# entry.S must be first, so that it's the first code in the text segment!!!
#
# We also snatch the use of a couple handy source files
# from the lib directory, to avoid gratuitous code duplication.
KERN_SRCFILES :=	kern/entry.S \
			kern/bootstrap.S \
			kern/init.c \
			kern/console.c \
			kern/dwarf.c \
			kern/dwarf_lines.c \
			kern/monitor.c \
			kern/printf.c \
			kern/kdebug.c \
			lib/printfmt.c \
			lib/readline.c \
			lib/string.c \
			kern/uefi.c \
			kern/uefiasm.S

# Only build files if they exist.
KERN_SRCFILES := $(wildcard $(KERN_SRCFILES))

ifdef KUBSAN
KERN_SRCFILES +=	llvm/ubsan/ubsan.c
endif

KERN_OBJFILES := $(patsubst %.c, $(OBJDIR)/%.o, $(KERN_SRCFILES))
KERN_OBJFILES := $(patsubst %.S, $(OBJDIR)/%.o, $(KERN_OBJFILES))
KERN_OBJFILES := $(patsubst $(OBJDIR)/lib/%, $(OBJDIR)/kern/%, $(KERN_OBJFILES))

# Binary program images to embed within the kernel.
ifeq ($(CONFIG_KSPACE),y)
KERN_BINFILES :=
KERN_BINFILES := $(patsubst %.c, $(OBJDIR)/%_out, $(KERN_BINFILES))
else
endif

# How to build kernel object files
$(OBJDIR)/kern/%.o: kern/%.c $(OBJDIR)/.vars.KERN_CFLAGS
	@echo + cc $<
	@mkdir -p $(@D)
	$(V)$(CC) $(KERN_CFLAGS) $(KERN_SAN_CFLAGS) -c -o $@ $<

$(OBJDIR)/kern/%.o: kern/%.S $(OBJDIR)/.vars.KERN_CFLAGS
	@echo + as $<
	@mkdir -p $(@D)
	$(V)$(CC) $(KERN_CFLAGS) $(KERN_SAN_CFLAGS) -c -o $@ $<

$(OBJDIR)/kern/%.o: lib/%.c $(OBJDIR)/.vars.KERN_CFLAGS
	@echo + cc $<
	@mkdir -p $(@D)
	$(V)$(CC) $(KERN_CFLAGS) $(KERN_SAN_CFLAGS) -c -o $@ $<

$(OBJDIR)/llvm/asan/%.o: llvm/asan/%.c $(OBJDIR)/.vars.KERN_CFLAGS
	@echo + cc $<
	@mkdir -p $(@D)
	$(V)$(CC) -ffreestanding $(KERN_CFLAGS) $(KERN_SAN_CFLAGS) -c -o $@ $<

$(OBJDIR)/llvm/ubsan/%.o: llvm/ubsan/%.c $(OBJDIR)/.vars.KERN_CFLAGS
	@echo + $(CC) $<
	@mkdir -p $(@D)
	$(V)$(CC) -ffreestanding $(KERN_CFLAGS) $(KERN_SAN_CFLAGS) -c -o $@ $<

# Special flags for kern/init
$(OBJDIR)/kern/init.o: override KERN_CFLAGS+=$(INIT_CFLAGS)
$(OBJDIR)/kern/init.o: $(OBJDIR)/.vars.INIT_CFLAGS

# How to build the kernel itself
$(OBJDIR)/kern/kernel: $(KERN_OBJFILES) $(KERN_BINFILES) kern/kernel.ld \
	  $(OBJDIR)/.vars.KERN_LDFLAGS
	@echo + ld $@
	$(V)$(LD) -o $@ $(KERN_LDFLAGS) $(KERN_SAN_LDFLAGS) $(KERN_OBJFILES) $(GCC_LIB) $(KERN_BINFILES)
	$(V)$(OBJDUMP) -S $@ > $@.asm
	$(V)$(NM) -n $@ > $@.sym

all: $(OBJDIR)/kern/kernel
